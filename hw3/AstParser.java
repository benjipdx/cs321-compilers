/* Generated By:JavaCC: Do not edit this line. AstParser.java */
import java.util.*;
import java.io.*;
import ast.*;

public class AstParser implements AstParserConstants {
  public static void main(String [] args) throws Exception {
    if (args.length == 1) {
      FileInputStream stream = new FileInputStream(args[0]);
      Ast.Program p = new AstParser(stream).Program();
      stream.close();
      System.out.print(p);
    } else {
      System.out.println("Need one file name as command-line argument.");
    }
  }

//GRAMMAR STUFFS
  static final public Ast.Program Program() throws ParseException {
  List<Ast.ClassDecl> cl = new ArrayList<Ast.ClassDecl>();
  Ast.ClassDecl c;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case kwClassDecl:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      c = ClassDecl();
                   cl.add(c);
    }
    jj_consume_token(0);
                                          {if (true) return new Ast.Program(cl);}
    throw new Error("Missing return statement in function");
  }

//ClassDecl  -> "ClassDecl" <Id> [<Id>] {VarDecl} {MethodDecl}
  static final public Ast.ClassDecl ClassDecl() throws ParseException {
  Ast.Id className = null;
List<Ast.VarDecl> variables = new ArrayList<Ast.VarDecl>();
List<Ast.MethodDecl> methods = new ArrayList<Ast.MethodDecl>();
Ast.Id parentName = null;
Ast.VarDecl variable = null;
Ast.MethodDecl method = null;
    jj_consume_token(kwClassDecl);
    className = Id();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Id:
      parentName = Id();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case kwVarDecl:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      variable = VarDecl();
                       variables.add(variable);
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case kwMethodDecl:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      method = MethodDecl();
                        methods.add(method);
    }
 {if (true) return new Ast.ClassDecl(className.nm,
parentName==null ? null: parentName.nm,
variables,
methods);}
    throw new Error("Missing return statement in function");
  }

  static final public Ast.Id Id() throws ParseException {
 Token token = null;
    token = jj_consume_token(Id);
               String literal = new String(token.image);
  {if (true) return new Ast.Id(literal);}
    throw new Error("Missing return statement in function");
  }

//MethodDecl -> "MethodDecl" Type <Id> "(" {Param} ")" {VarDecl} {Stmt}
  static final public Ast.MethodDecl MethodDecl() throws ParseException {
  Ast.Type type;
Ast.Param param;
Ast.VarDecl var;
Ast.Stmt stmt;
List<Ast.Param> params = new ArrayList<Ast.Param>();
List<Ast.VarDecl> vars = new ArrayList<Ast.VarDecl>();
List<Ast.Stmt> stmts = new ArrayList<Ast.Stmt>();
Ast.Id methodName;
    jj_consume_token(kwMethodDecl);
    type = Type();
    methodName = Id();
    jj_consume_token(57);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 57:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_4;
      }
      param = Param();
                    params.add(param);
    }
    jj_consume_token(58);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case kwVarDecl:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_5;
      }
      var = VarDecl();
                    vars.add(var);
    }
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case kwAssign:
      case kwCallStmt:
      case kwIf:
      case kwPrint:
      case kwReturn:
      case kwWhile:
      case 61:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_6;
      }
      stmt = Stmt();
                  stmts.add(stmt);
    }
 {if (true) return new Ast.MethodDecl(type,methodName.nm,params,vars,stmts);}
    throw new Error("Missing return statement in function");
  }

//VarDecl    -> "VarDecl" Type <Id> Exp
  static final public Ast.VarDecl VarDecl() throws ParseException {
 Ast.Type type;
Ast.Id name;
Ast.Exp exp;
    jj_consume_token(kwVarDecl);
    type = Type();
    name = Id();
    exp = Exp();
 {if (true) return new Ast.VarDecl(type,name.nm,exp);}
    throw new Error("Missing return statement in function");
  }

//Param      -> "(" Type <Id> ")"
  static final public Ast.Param Param() throws ParseException {
 Ast.Type type = null;
Ast.Id name;
    jj_consume_token(57);
    jj_consume_token(kwParam);
    type = Type();
    name = Id();
    jj_consume_token(58);
 {if (true) return new Ast.Param(type,name.nm);}
    throw new Error("Missing return statement in function");
  }

/*
Type   -> "void" 
       | "IntType" 
       | "BoolType" 
       | "(" ("ObjType" <Id> ")" | "ArrayType" Type ")")
*/
  static final public Ast.Type Type() throws ParseException {
  Ast.Id cn; Ast.Type t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case kwVoid:
      jj_consume_token(kwVoid);
                                    t = null;
      break;
    case kwIntType:
      jj_consume_token(kwIntType);
                                    t = new Ast.IntType();
      break;
    case kwBoolType:
      jj_consume_token(kwBoolType);
                                    t = new Ast.BoolType();
      break;
    case 57:
      jj_consume_token(57);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case kwObjType:
        jj_consume_token(kwObjType);
        cn = Id();
                                    t = new Ast.ObjType(cn.nm);
        break;
      case kwArrayType:
        jj_consume_token(kwArrayType);
        t = Type();
                                    t = new Ast.ArrayType(t);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(58);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

/*
Stmt   -> "{" {Stmt} "}"
       |  "Assign" Exp Exp
       |  "CallStmt" Exp <Id> "(" {Exp} ")"
       |  "If" Exp Stmt [ "Else" Stmt ]  
       |  "While" Exp Stmt
       |  "Print" (Exp | <StrLit>)
       |  "Return" Exp
*/
  static final public Ast.Stmt Stmt() throws ParseException {
List<Ast.Stmt> stmts = new ArrayList<Ast.Stmt>();
List<Ast.Exp> arguments = new ArrayList<Ast.Exp>();
Ast.Exp arg;
Ast.Stmt stmt;
Ast.Block block;
Ast.Exp lhs;
Ast.Exp rhs;
Ast.Exp callexp;
Ast.Id id;
Ast.Exp ifexp;
Ast.Stmt stmt1 = null;
Ast.Exp wexp;
Ast.Exp rext;
Ast.Exp prext;
Ast.StrLit strlit;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 61:
      jj_consume_token(61);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case kwAssign:
        case kwCallStmt:
        case kwIf:
        case kwPrint:
        case kwReturn:
        case kwWhile:
        case 61:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_7;
        }
        stmt = Stmt();
                    stmts.add(stmt);
      }
      jj_consume_token(62);
                                             {if (true) return new Ast.Block(stmts);}
      break;
    case kwAssign:
      jj_consume_token(kwAssign);
      lhs = Exp();
      rhs = Exp();
                                  {if (true) return new Ast.Assign(lhs,rhs);}
      break;
    case kwCallStmt:
      jj_consume_token(kwCallStmt);
      callexp = Exp();
      id = Id();
      jj_consume_token(57);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case kwThis:
        case IntLit:
        case Id:
        case 57:
        case BoolLit:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_8;
        }
        arg = Exp();
                                                     arguments.add(arg);
      }
      jj_consume_token(58);
                                                                                 {if (true) return new Ast.CallStmt(callexp,id.nm,arguments);}
      break;
    case kwIf:
      jj_consume_token(kwIf);
      ifexp = Exp();
      stmt = Stmt();
      if (jj_2_1(2)) {
        jj_consume_token(kwElse);
        stmt1 = Stmt();
      } else {
        ;
      }
                                                                     {if (true) return new Ast.If(ifexp,stmt,stmt1);}
      break;
    case kwWhile:
      jj_consume_token(kwWhile);
      wexp = Exp();
      stmt = Stmt();
                                    {if (true) return new Ast.While(wexp,stmt);}
      break;
    case kwPrint:
      jj_consume_token(kwPrint);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case kwThis:
      case IntLit:
      case Id:
      case 57:
      case BoolLit:
        prext = Exp();
                            {if (true) return new Ast.Print(prext);}
        break;
      case StrLit:
        strlit = StrLit();
                      {if (true) return new Ast.Print(strlit);}
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case kwReturn:
      jj_consume_token(kwReturn);
      rext = Exp();
                           {if (true) return new Ast.Return(rext);}
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Ast.StrLit StrLit() throws ParseException {
 Token token;
    token = jj_consume_token(StrLit);
                   String literal = new String(token.image.substring(1,token.image.length()-1));
  {if (true) return new Ast.StrLit(literal);}
    throw new Error("Missing return statement in function");
  }

  static final public Ast.Exp Exp() throws ParseException {
List<Ast.Exp> arguments = new ArrayList<Ast.Exp>();
Ast.Exp arg;
Ast.BOP bin;
Ast.Exp exp1;
Ast.Exp exp2;
Ast.UOP uop;
Ast.Id id;
Ast.Type type = null;
Ast.IntLit intlit;
Ast.BoolLit bool;
Ast.Exp e = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 57:
      jj_consume_token(57);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case kwArrayElm:
      case kwBinop:
      case kwCall:
      case kwField:
      case kwNewArray:
      case kwNewObj:
      case kwUnop:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case kwBinop:
          jj_consume_token(kwBinop);
          bin = BOP();
          exp1 = Exp();
          exp2 = Exp();
                                            e =  new Ast.Binop(bin,exp1,exp2);
          break;
        case kwUnop:
          jj_consume_token(kwUnop);
          uop = UOP();
          exp1 = Exp();
                                 e =  new Ast.Unop(uop,exp1);
          break;
        case kwCall:
          jj_consume_token(kwCall);
          exp1 = Exp();
          id = Id();
          jj_consume_token(57);
          label_9:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case kwThis:
            case IntLit:
            case Id:
            case 57:
            case BoolLit:
              ;
              break;
            default:
              jj_la1[13] = jj_gen;
              break label_9;
            }
            arg = Exp();
                                              arguments.add(arg);
          }
          jj_consume_token(58);
                                                                          e = new Ast.Call(exp1,id.nm,arguments);
          break;
        case kwNewObj:
          jj_consume_token(kwNewObj);
          id = Id();
                      e = new Ast.NewObj(id.nm);
          break;
        case kwField:
          jj_consume_token(kwField);
          exp1 = Exp();
          id = Id();
                                        e = new Ast.Field(exp1,id.nm);
          break;
        case kwNewArray:
          jj_consume_token(kwNewArray);
          type = Type();
          intlit = IntLit();
                                                    e = new Ast.NewArray(type,intlit.i);
          break;
        case kwArrayElm:
          jj_consume_token(kwArrayElm);
          exp1 = Exp();
          exp2 = Exp();
                                              e =  new Ast.ArrayElm(exp1,exp2);
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      jj_consume_token(58);
      break;
    case kwThis:
      jj_consume_token(kwThis);
            e = new Ast.This();
      break;
    case Id:
      id = Id();
             e = new Ast.Id(id.nm);
      break;
    case IntLit:
      intlit = IntLit();
                       e = new Ast.IntLit(intlit.i);
      break;
    case BoolLit:
      bool = BoolLit();
                      e = new Ast.BoolLit(bool.b);
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public Ast.IntLit IntLit() throws ParseException {
 Token token;
    token = jj_consume_token(IntLit);
                   int literal = Integer.parseInt(token.image);
  {if (true) return new Ast.IntLit(literal);}
    throw new Error("Missing return statement in function");
  }

  static final public Ast.BoolLit BoolLit() throws ParseException {
 Token token;
    token = jj_consume_token(BoolLit);
                    boolean literal = Boolean.parseBoolean(token.image);
  {if (true) return new Ast.BoolLit(literal);}
    throw new Error("Missing return statement in function");
  }

/*
BOP    -> "+"  | "-"  | "*" | "/"  | "&&" | "||"
       |  "==" | "!=" | "<" | "<=" | ">"  | ">=" 
*/
  static final public Ast.BOP BOP() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 40:
      jj_consume_token(40);
        {if (true) return Ast.BOP.ADD;}
      break;
    case 41:
      jj_consume_token(41);
          {if (true) return Ast.BOP.SUB;}
      break;
    case 42:
      jj_consume_token(42);
          {if (true) return Ast.BOP.MUL;}
      break;
    case 43:
      jj_consume_token(43);
          {if (true) return Ast.BOP.DIV;}
      break;
    case 44:
      jj_consume_token(44);
          {if (true) return Ast.BOP.AND;}
      break;
    case 45:
      jj_consume_token(45);
          {if (true) return Ast.BOP.OR;}
      break;
    case 47:
      jj_consume_token(47);
          {if (true) return Ast.BOP.EQ;}
      break;
    case 48:
      jj_consume_token(48);
          {if (true) return Ast.BOP.NE;}
      break;
    case 49:
      jj_consume_token(49);
          {if (true) return Ast.BOP.LT;}
      break;
    case 50:
      jj_consume_token(50);
          {if (true) return Ast.BOP.LE;}
      break;
    case 51:
      jj_consume_token(51);
          {if (true) return Ast.BOP.GT;}
      break;
    case 52:
      jj_consume_token(52);
          {if (true) return Ast.BOP.GE;}
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//UOP    -> "-" | "!"
  static final public Ast.UOP UOP() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 41:
      jj_consume_token(41);
        {if (true) return Ast.UOP.NEG;}
      break;
    case 46:
      jj_consume_token(46);
          {if (true) return Ast.UOP.NOT;}
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_3R_16() {
    if (jj_scan_token(kwPrint)) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_scan_token(kwWhile)) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(kwIf)) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_scan_token(kwCallStmt)) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_scan_token(kwAssign)) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_scan_token(61)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_scan_token(kwElse)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_scan_token(kwReturn)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public AstParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[19];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x4000,0x0,0x80000000,0x200000,0x0,0x80000000,0xc042200,0x1000100,0x80800,0xc042200,0x20000000,0x20000000,0xc042200,0x20000000,0x40c21480,0x40c21480,0x20000000,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x80,0x0,0x0,0x2000000,0x0,0x20000002,0x0,0x2000001,0x20000002,0x820000a0,0x820000e0,0x20000002,0x820000a0,0x0,0x0,0x820000a0,0x1fbf00,0x4200,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[1];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public AstParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public AstParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AstParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public AstParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AstParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public AstParser(AstParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(AstParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[64];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 19; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 64; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
